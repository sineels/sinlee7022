name: Repo Sync

# **What it does**: GitHub Docs has two repositories: github/docs (public) and github/docs-internal (private).
# This GitHub Actions workflow keeps the `main` branch of those two repos in sync.
# **Why we have it**: To keep the open-source repository up-to-date
# while still having an internal repository for sensitive work.
# **Who does it impact**: Open-source.
# For more details, see https://github.com/repo-sync/repo-sync#how-it-works

on:
  workflow_dispatch:
  schedule:
    - cron: '20,50 * * * *' # Run every hour at 20 and 50 minutes after

permissions:
  contents: write
  pull-requests: write

jobs:
  repo-sync:
    if: github.repository == 'github/docs-internal' || github.repository == 'github/docs'
    name: Repo Sync
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0

      - name: Sync repo to branch
        uses: repo-sync/github-sync@3832fe8e2be32372e1b3970bbae8e7079edeec88
        with:
          source_repo: https://${{ secrets.DOCS_BOT_PAT_WORKFLOW }}@github.com/github/${{ github.repository == 'github/docs-internal' && 'docs' || 'docs-internal' }}.git
          source_branch: main
          destination_branch: repo-sync
          github_token: ${{ secrets.DOCS_BOT_PAT_WORKFLOW }}

      - name: Ship pull request
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        with:
          github-token: ${{ secrets.DOCS_BOT_PAT_WORKFLOW }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo
            const head = 'github:repo-sync'
            const base = 'main'

            async function closePullRequest(prNumber) {
              console.log('Closing pull request', prNumber)
              await github.rest.pulls.update({
                owner,
                repo,
                pull_number: prNumber,
                state: 'closed'
              })
              // Error loud here, so no try/catch
              console.log('Closed pull request', prNumber)
            }

            console.log('Closing any existing pull requests')
            const { data: existingPulls } = await github.rest.pulls.list({ owner, repo, head, base })
            if (existingPulls.length) {
              console.log('Found existing pull requests', existingPulls.map(pull => pull.number))
              for (const pull of existingPulls) {
                await closePullRequest(pull.number)
              }
              console.log('Closed existing pull requests')
            }

            console.log('Creating a new pull request')
            const body = `
            This is an automated pull request to sync changes between the public and private repos.
            Our bot will merge this pull request automatically.
            To preserve continuity across repos, _do not squash_ this pull request.
            `
            let pull, pull_number
            try {
              const response = await github.rest.pulls.create({
                owner,
                repo,
                head,
                base,
                title: 'Repo sync',
                body,
              })
              pull = response.data
              pull_number = pull.number
              console.log('Created pull request successfully', pull.html_url)
            } catch (err) {
              // Don't error/alert if there's no commits to sync
              // Don't throw if > 100 pulls with same head_sha issue
              if (err.message?.includes('No commits') || err.message?.includes('same head_sha')) {
                console.log(err.message)
                return
              }
              throw err
            }

            console.log('Locking conversations to prevent spam')
            try {
              await github.rest.issues.lock({
                ...context.repo,
                issue_number: pull_number,
                lock_reason: 'spam'
              })
              console.log('Locked the pull request to prevent spam')
            } catch (error) {
              console.error('Failed to lock the pull request.', error)
              // Don't fail the workflow
            }

            console.log('Counting files changed')
            const { data: prFiles } = await github.rest.pulls.listFiles({ owner, repo, pull_number })
            if (prFiles.length) {
              console.log(prFiles.length, 'files have changed')
            } else {
              console.log('No files changed, closing')
              await closePullRequest(pull_number)
              return
            }

            console.log('Checking for merge conflicts')
            if (pull.mergeable_state === 'dirty') {
              console.log('Pull request has a conflict', pull.html_url)
              await closePullRequest(pull_number)
              throw new Error('Pull request has a conflict, please resolve manually')
            }
            console.log('No detected merge conflicts')

            console.log('Merging the pull request')
            // Admin merge pull request to avoid squash
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number,
              merge_method: 'merge',
            })
            // Error loud here, so no try/catch
            console.log('Merged the pull request successfully')

      - name: Send Slack notification if workflow fails
        if: failure()
        uses: someimportantcompany/github-actions-slack-message@1d367080235edfa53df415bd8e0bbab480f29bad
        with:
          channel: ${{ secrets.DOCS_ALERTS_SLACK_CHANNEL_ID }}
          bot-token: ${{ secrets.SLACK_DOCS_BOT_TOKEN }}
          color: failure
          text: The last repo-sync run for ${{github.repository}} failed. See https://github.com/${{github.repository}}/actions/workflows/repo-sync.yml
          ---
title: Setting your commit email address
intro: 'You can set the email address that is used to author commits on {% data variables.location.product_location %} and on your computer.'
redirect_from:
  - /articles/keeping-your-email-address-private
  - /articles/setting-your-commit-email-address-on-github
  - /articles/about-commit-email-addresses
  - /articles/git-email-settings
  - /articles/setting-your-email-in-git
  - /articles/set-your-user-name-email-and-github-token
  - /articles/setting-your-commit-email-address-in-git
  - /articles/setting-your-commit-email-address
  - /github/setting-up-and-managing-your-github-user-account/setting-your-commit-email-address
  - /github/setting-up-and-managing-your-github-user-account/managing-email-preferences/setting-your-commit-email-address
  - /account-and-profile/setting-up-and-managing-your-github-user-account/managing-email-preferences/setting-your-commit-email-address
versions:
  fpt: '*'
  ghes: '*'
  ghae: '*'
  ghec: '*'
topics:
  - Accounts
  - Notifications
shortTitle: Set commit email address
---
## About commit email addresses

{% data variables.product.prodname_dotcom %} uses your commit email address to associate commits with your account on {% data variables.location.product_location %}. You can choose the email address that will be associated with the commits you push from the command line as well as web-based Git operations you make.

For web-based Git operations, you can set your commit email address on {% ifversion ghae %}{% data variables.product.product_name %}{% else %}{% data variables.location.product_location %}{% endif %}. For commits you push from the command line, you can set your commit email address in Git.

{% ifversion fpt or ghec %}Any commits you made prior to changing your commit email address are still associated with your previous email address.{% else %}After changing your commit email address on {% data variables.product.product_name %}, the new email address will be visible in all of your future web-based Git operations by default. Any commits you made prior to changing your commit email address are still associated with your previous email address.{% endif %}

{% ifversion fpt or ghec %}

{% note %}

**Note**: {% data reusables.user-settings.no-verification-disposable-emails %}

{% endnote %}

{% endif %}

{% ifversion fpt or ghec %}If you'd like to keep your personal email address private, you can use a `noreply` email address from {% data variables.product.product_name %} as your commit email address. To use your `noreply` email address for commits you push from the command line, use that email address when you set your commit email address in Git. To use your `noreply` address for web-based Git operations, set your commit email address on GitHub and choose to **Keep my email address private**.

You can also choose to block commits you push from the command line that expose your personal email address. For more information, see "[AUTOTITLE](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/blocking-command-line-pushes-that-expose-your-personal-email-address)."{% endif %}

To ensure that commits are attributed to you and appear in your contributions graph, use an email address that is connected to your account on {% data variables.location.product_location %}{% ifversion fpt or ghec %}, or the `noreply` email address provided to you in your email settings{% endif %}. {% ifversion not ghae %}For more information, see "[AUTOTITLE](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/adding-an-email-address-to-your-github-account)."{% endif %}

{% ifversion fpt or ghec %}

{% note %}

**Note:** If you created your account on {% data variables.location.product_location %} _after_ July 18, 2017, your `noreply` email address for {% data variables.product.product_name %} is an ID number and your username in the form of <code>ID+USERNAME@users.noreply.github.com</code>. If you created your account on {% data variables.location.product_location %} _prior to_ July 18, 2017, and enabled **Keep my email address private** prior to that date, your `noreply` email address from {% data variables.product.product_name %} is <code>USERNAME@users.noreply.github.com</code>. You can get an ID-based `noreply` email address for {% data variables.product.product_name %} by selecting (or deselecting and reselecting) **Keep my email address private** in your email settings.

{% endnote %}

If you use your `noreply` email address for {% data variables.product.product_name %} to make commits and then [change your username](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-user-account-settings/changing-your-github-username), those commits will not be associated with your account on {% data variables.location.product_location %}. This does not apply if you're using the ID-based `noreply` address from {% data variables.product.product_name %}. For more information, see "[AUTOTITLE](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-user-account-settings/changing-your-github-username)."{% endif %}

## Setting your commit email address on {% data variables.product.prodname_dotcom %}

{% data reusables.files.commit-author-email-options %}

{% data reusables.user-settings.access_settings %}
{% data reusables.user-settings.emails %}
{% data reusables.user-settings.add_and_verify_email %}
{% data reusables.user-settings.select_primary_email %}{% ifversion fpt or ghec %}
{% data reusables.user-settings.keeping_your_email_address_private %}{% endif %}

## Setting your commit email address in Git

You can use the `git config` command to change the email address you associate with your Git commits. The new email address you set will be visible in any future commits you push to {% data variables.location.product_location %} from the command line. Any commits you made prior to changing your commit email address are still associated with your previous email address.

### Setting your email address for every repository on your computer

{% data reusables.command_line.open_the_multi_os_terminal %}

1. {% data reusables.user-settings.set_your_email_address_in_git %}

   ```shell
   git config --global user.email "YOUR_EMAIL"
   ```

1. {% data reusables.user-settings.confirm_git_email_address_correct %}

   ```shell
   $ git config --global user.email
   email@example.com
   ```

1. {% data reusables.user-settings.link_email_with_your_account %}

### Setting your email address for a single repository

{% data variables.product.product_name %} uses the email address set in your local Git configuration to associate commits pushed from the command line with your account on {% data variables.location.product_location %}.

You can change the email address associated with commits you make in a single repository. This will override your global Git configuration settings in this one repository, but will not affect any other repositories.

{% data reusables.command_line.open_the_multi_os_terminal %}

1. Change the current working directory to the local repository where you want to configure the email address that you associate with your Git commits.
1. {% data reusables.user-settings.set_your_email_address_in_git %}

   ```shell
   git config user.email "YOUR_EMAIL"
   ```

1. {% data reusables.user-settings.confirm_git_email_address_correct %}

   ```shell
   $ git config user.email
   email@example.com
   ```

1. {% data reusables.user-settings.link_email_with_your_account %}== "82.212.97.162" ==

2022년 5월 8일 11:12jongo1985(말하다ㅣ억지)하원 회담:행정가/시(G1):(말하다)) [[Special:Contributions/2001:4430:C264:741E:6D51:436C:340F:D92|2001:4430:C264:741E:6D51:436C:340F:D92]] 13:26, 14 September 2023 (UTC)$ git config --global user.email
email@example.comUsing Max on a Date Field

Hi team, hopefully this is an easy one.  I've got a very simple query which is summing contract values by product category:

 

q = load "RampReportforUpload";

q = group q by 'Product_Category';

q = foreach q generate q.'Product_Category' as 'Product_Category', sum(q.'Annual_Contract_Value_Plan_Rate') as 'B';

q = order q by 'B' desc;

q = limit q 2000;

Additionally, I'd like to filter these results to return only the rows from a field called "Reporting Month" which carry the most recent date (Field name = "Reporting Month" and is populated with a date value of the last day of each calendar month).  Can you use the "max" function on a date field?  It looks like it's possible but when I run the following query it returns 9/30/2022 even though I have rows with a date of 8/31/2023.  Maybe I have to split the date field into max of year AND max of month AND max of day???

 

q = load "RampReportforUpload";

q = group q by all;

q = foreach q generate max(Reporting_Month) as 'Reporting Month';

 

Returns 9/30/2022 instead of 8/31/2023

 

If max on a date field isn't possible I've also included a field in my dataset called "Reporting Month Sequence" which I could use as an alternative.  But I'd prefer to use the Reporting Month field because it's native to my dataset.

 

Can anybody help me with the proper SAQL syntax to accomplish this?  Attaching some screen shots for reference.

 

Thank you!!!


